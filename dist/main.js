(()=>{var e={99:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var o=t(15),i=t.n(o),a=t(645),r=t.n(a),s=t(667),d=t.n(s),l=t(525),c=t.n(l),A=r()(i());A.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap);"]);var u=d()(c());A.push([e.id,"*{margin:0;padding:0;box-sizing:border-box;font-family:'Open Sans', sans-serif}.text-center{text-align:center}body{display:flex}main{width:70%;height:100vh;padding-left:2em}h1{margin-bottom:3em}.list-heading{font-size:2.2em;margin-bottom:1em}.d-flex{display:flex}nav{top:0;left:0;height:100vh;background:#1b2280;width:20%;color:#fff;padding:2rem}.list{border:0;display:block;background:transparent;color:#fff;font-size:1.1rem;margin-bottom:1em;cursor:pointer}.img{width:2.3rem;height:2.3rem;cursor:pointer;background-image:url("+u+");background-position:center;background-size:contain;background-repeat:no-repeat;margin-left:1em}.headings{margin:1.7rem 0;font-size:1.6em}#categories-container{width:100%;display:flex;justify-content:space-between;align-items:center}.task{width:70%}.task-body{display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid #bdbdbd;padding:0.5em}.task-body-text{display:flex;align-items:center;width:50%}.task-body-text p{margin-left:1em}.task-body-end{display:flex}.task-body-end div{display:flex;align-items:center}.task-body-end .edit-btn,.task-body-end .info-btn,.task-body-end .delete-btn{border:none;background-color:#1b2280;color:white;padding:0.5em;border-radius:0.5em;margin-right:0.5em}.task-body-end .info-btn{background-color:#ffba24}.task-body-end .delete-btn{background-color:#ff1616}.task-hidden{padding:0.7em;display:none;justify-content:space-between}.task-hidden-desc{width:40%}.task-hidden-desc p{margin-top:1em;width:100%;font-size:0.7em}.task-hidden-priority{display:flex;flex-direction:column;align-items:center;width:20%}.task-hidden-priority p{margin-top:1.3em;font-size:1.4em;color:red}.task-hidden-date{display:flex;flex-direction:column;align-items:center;width:25%}.task-hidden-date p{margin-top:1.3em;font-size:1.4em}.modal{display:none;position:fixed;z-index:1;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:#000;background-color:rgba(0,0,0,0.4)}.modal-content{background-color:#fefefe;margin:15% auto;padding:20px;border:1px solid #888;width:40%;display:flex;justify-content:space-between;align-items:center}.close{color:#aaa;font-size:28px;font-weight:bold;margin-left:1em}.close:hover,.close:focus{color:black;text-decoration:none;cursor:pointer}\n","",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAQA,EACE,QAAS,CACT,SAAU,CACV,qBAAsB,CACtB,mCAAoC,CACrC,aAGC,iBAAkB,CACnB,KAGC,YAAa,CACd,KAGC,SAAU,CACV,YAAa,CACb,gBAAiB,CAClB,GAGC,iBAAkB,CACnB,cAGC,eAAgB,CAChB,iBAAkB,CACnB,QAGC,YAAa,CACd,IAGC,KAAM,CACN,MAAO,CACP,YAAa,CACb,kBA9Ca,CA+Cb,SAAU,CACV,UA/CU,CAgDV,YAAa,CACd,MAGC,QAAS,CACT,aAAc,CACd,sBAAuB,CACvB,UAvDU,CAwDV,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CAChB,KAIC,YAAa,CACb,aAAc,CACd,cAAe,CACf,wDAA0C,CAC1C,0BAA2B,CAC3B,uBAAwB,CACxB,2BAA4B,CAC5B,eAAgB,CACjB,UAGC,eAAgB,CAChB,eAAgB,CACjB,sBAGC,UAAW,CACX,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACpB,MAGC,SAAU,CAEV,WACE,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,+BAAgC,CAChC,aAAc,CAEd,gBACE,YAAa,CACb,kBAAmB,CACnB,SAAU,CAHX,kBAMG,eAAgB,CACjB,eAID,YAAa,CADd,mBAIG,YAAa,CACb,kBAAmB,CALtB,6EASG,WAAY,CACZ,wBApHO,CAqHP,WAAY,CACZ,aAAc,CACd,mBAAoB,CACpB,kBAAmB,CAdtB,yBAmBG,wBA1HkB,CAuGrB,2BAwBG,wBA9Hc,CA+Hf,aAMH,aAAc,CACd,YAAa,CACb,6BAA8B,CAE9B,kBACE,SAAU,CADX,oBAGG,cAAe,CACf,UAAW,CACX,eAAgB,CACjB,sBAID,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,SAAU,CAJX,wBAOG,gBAAiB,CACjB,eAAgB,CAChB,SAAU,CACX,kBAID,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,SAAU,CAJX,oBAOG,gBAAiB,CACjB,eAAgB,CACjB,OAUL,YAAa,CACb,cAAe,CACf,SAAU,CACV,MAAO,CACP,KAAM,CACN,UAAW,CACX,WAAY,CACZ,aAAc,CACd,qBAA4B,CAC5B,gCAAiC,CAClC,eAGC,wBAAyB,CACzB,eAAgB,CAChB,YAAa,CACb,qBAAsB,CACtB,SAAU,CACV,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACpB,OAGC,UAAW,CACX,cAAe,CACf,gBAAiB,CACjB,eAAgB,CACjB,0BAIC,WAAY,CACZ,oBAAqB,CACrB,cAAe",sourcesContent:["$purple:#1b2280;\n$white: #fff;\n$black: #000;\n$yellow: rgb(255, 186, 36);\n$red: rgb(255, 22, 22);\n\n@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap');\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: 'Open Sans', sans-serif;\n}\n\n.text-center {\n  text-align: center;\n}\n\nbody {\n  display: flex;\n}\n\nmain {\n  width: 70%;\n  height: 100vh;\n  padding-left: 2em;\n}\n\nh1 {\n  margin-bottom: 3em;\n}\n\n.list-heading {\n  font-size: 2.2em;\n  margin-bottom: 1em;\n}\n\n.d-flex {\n  display: flex;\n}\n\nnav {\n  top: 0;\n  left: 0;\n  height: 100vh;\n  background: $purple;\n  width: 20%;\n  color: $white;\n  padding: 2rem;\n}\n\n.list {\n  border: 0;\n  display: block;\n  background: transparent;\n  color: $white;\n  font-size: 1.1rem;\n  margin-bottom: 1em;\n  cursor: pointer;\n}\n\n\n.img {\n  width: 2.3rem;\n  height: 2.3rem;\n  cursor: pointer;\n  background-image: url('./assets/plus.svg');\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  margin-left: 1em;\n}\n\n.headings {\n  margin: 1.7rem 0;\n  font-size: 1.6em;\n}\n\n#categories-container {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.task {\n  width: 70%;\n  \n  &-body {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-bottom: 1px solid #bdbdbd;\n    padding: 0.5em;\n\n    &-text {\n      display: flex;\n      align-items: center;\n      width: 50%;\n\n      p {\n        margin-left: 1em;\n      }\n    }\n\n    &-end {\n      display: flex;\n\n      div {\n        display: flex;\n        align-items: center;\n      }\n\n      .edit-btn {\n        border: none;\n        background-color: $purple;\n        color: white;\n        padding: 0.5em;\n        border-radius: 0.5em;\n        margin-right: 0.5em;        \n      }\n\n      .info-btn {\n        @extend .edit-btn;\n        background-color: $yellow;\n      }\n\n      .delete-btn {\n        @extend .edit-btn;\n        background-color: $red;\n      }\n\n    }\n  }\n  \n  &-hidden {\n    padding: 0.7em;\n    display: none;\n    justify-content: space-between;\n\n    &-desc {\n      width: 40%;\n      p {\n        margin-top: 1em;\n        width: 100%;\n        font-size: 0.7em;\n      }\n    }\n\n    &-priority {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      width: 20%; \n\n      p {\n        margin-top: 1.3em;\n        font-size: 1.4em;\n        color: red;\n      }\n    }\n\n    &-date {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      width: 25%;\n      \n      p {\n        margin-top: 1.3em;\n        font-size: 1.4em;\n      }\n\n    }\n  }\n}\n\n\n// MODAL STYLING \n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 40%; /* Could be more or less, depending on screen size */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.close {\n  color: #aaa;\n  font-size: 28px;\n  font-weight: bold;\n  margin-left: 1em;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n// END MODAL"],sourceRoot:""}]);const p=A},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(o)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(i[r]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var t,o,i=(o=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,i=!1,a=void 0;try{for(var r,s=e[Symbol.iterator]();!(o=(r=s.next()).done)&&(t.push(r.value),!n||t.length!==n);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==s.return||s.return()}finally{if(i)throw a}}return t}}(t,o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],r=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(d," */"),c=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[a].concat(c).concat([l]).join("\n")}return[a].join("\n")}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},525:e=>{e.exports="images/plus.d7a6fc.svg"},379:(e,n,t)=>{"use strict";var o,i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function r(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},o=[],i=0;i<e.length;i++){var s=e[i],d=n.base?s[0]+n.base:s[0],l=t[d]||0,c="".concat(d," ").concat(l);t[d]=l+1;var A=r(c),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(a[A].references++,a[A].updater(u)):a.push({identifier:c,updater:C(u,n),references:1}),o.push(c)}return o}function d(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var r=i(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}return n}var l,c=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function A(e,n,t,o){var i=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=c(n,i);else{var a=document.createTextNode(i),r=e.childNodes;r[n]&&e.removeChild(r[n]),r.length?e.insertBefore(a,r[n]):e.appendChild(a)}}function u(e,n,t){var o=t.css,i=t.media,a=t.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,m=0;function C(e,n){var t,o,i;if(n.singleton){var a=m++;t=p||(p=d(n)),o=A.bind(null,t,a,!1),i=A.bind(null,t,a,!0)}else t=d(n),o=u.bind(null,t,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var i=r(t[o]);a[i].references--}for(var d=s(e,n),l=0;l<t.length;l++){var c=r(t[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}t=d}}}}},n={};function t(o){if(n[o])return n[o].exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};t.r(e);class n{constructor(e){this.name=e,this.todos=[]}addToLists(e){e.push(this)}assignToDos(e){this.todos.push(e)}deleteList(e){let n=e.find((e=>e.name==this.name)),t=e.indexOf(n);t>-1&&e.splice(t,1)}}var o=t(379),i=t.n(o),a=t(99);i()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;const r={modal:()=>document.getElementById("myModal"),btn:()=>document.getElementById("new-list-btn"),span:()=>document.getElementsByClassName("close")[0],input:()=>document.getElementById("modal-text"),submit:()=>document.getElementById("modal-submit-btn"),btnclick:function(){r.modal().style.display="block"},closeclick:function(){r.modal().style.display="none"}},s=r;let d=[],l=new n("All"),c=new n("Unlisted");d.push(l),d.push(c);class A{constructor(e,n,t,o,i,a){this.title=e,this.description=n,this.dueDate=t,this.priority=o,this.category=i,this.completeStatus=!1}editTitle(e){this.title=e}editDescription(e){this.description=e}editDate(e){this.dueDate=e}editPriority(e){this.priority=e}assignList(e){e.push(this)}toggleStatus(){0==this.completeStatus?this.completeStatus=!0:this.completeStatus=!1}}let u=document.querySelector(".all-categories"),p=document.querySelector(".info-btn"),m=document.querySelector("#task-category"),C=document.getElementById("create-task-form");s.btn().onclick=s.btnclick,s.span().onclick=s.closeclick,s.submit().addEventListener("click",(()=>{let t=s.input().value;s.input().value="",new n(t).addToLists(e.default),e.default.forEach((e=>{let n=document.createElement("button"),t=document.createElement("option");n.innerText=e.name,n.className="list",t.innerText=e.name,t.value=e.name,m.appendChild(t),u.appendChild(n)}))}));let f=document.querySelector(".task-hidden");p.addEventListener("click",(()=>{"none"==f.style.display?(f.style.display="block",f.style.display="flex"):f.style.display="none"})),C.addEventListener("submit",(n=>{n.preventDefault();let t=document.getElementById("task-title").value,o=document.getElementById("task-description").value,i=document.getElementById("task-priority").value,a=document.getElementById("task-duedate").value,r=document.getElementById("task-category").value;(e=>{let n=document.getElementById("task-listing");n.innerHTML="",e.todos.forEach((e=>{let t=document.createElement("div");t.className="task";let o=document.createElement("div");o.className="task-body";let i=document.createElement("div");i.className="task-hidden",o.innerHTML=`<div class="task-body-text">\n                            <input type="checkbox" name="check" id="checkbox">\n                            <p>${e.title}</p>\n                          </div>\n                          <div class="task-body-end">\n                            <button class="info-btn">More Info</button>\n                            <button class="edit-btn">Edit</button>\n                            <button class="delete-btn">Delete</button>\n                          </div>`,i.innerHTML=`<div class="task-hidden-desc">\n                              <h5>Description:</h5>\n                              <p>${e.description}</p>\n                            </div>\n                            <div class="task-hidden-priority">\n                              <h5>Priority</h5>\n                              <p>${e.priority}</p>\n                            </div>\n                            <div class="task-hidden-date">\n                              <h5>Due Date</h5>\n                              <p>${e.duedate}</p>\n                            </div>`,t.appendChild(o),t.appendChild(i),n.appendChild(t)}))})(((n,t,o,i,a)=>{let r=new A(n,t,o,i,a,!1),s=e.default.find((e=>"All"==e.name)),d=e.default.find((e=>e.name==a));return s.todos.push(r),d.todos.push(r),s})(t,o,i,a,r.charAt(0).toUpperCase()+r.slice(1)))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,